<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Привет! Данная программа предназначена для нахождения площади выбранной территории на карте.
А это окно научит вас ей пользоваться.

Во-первых, несколько слов об истории создания и целях программы. Изначальный проект, для которого она писалась - "Epsilon" - не оправдал ожиданий и был закрыт, не дождавшись завершения Area Finder'a, но я всё равно решил её дописать. Из-за этого она крайне узкоспециализированна. Но тем не менее я могу представить себе ситуацию, где кто-то может её использовать вне рамок изначального проекта.

Area Finder позволяет: открыть любую картинку, а затем выделить зону или несколько зон на ней. После этого он посчитает площадь выделенной территории и выведет её в заглавие программы. Также он позволяет находить "цену" выбранной территории, - мне сложно представить, что сейчас это может кому-то пригодиться (это было нужно для изначального проекта), но функция есть, так что такая возможность есть.

Есть два режима выбора территории: прямоугольный и произвольный. С прямоугольным всё понятно, а вот произвольный работает подобно перу в Photoshop - вы создаёте обводку требуемой зоны с помощью векторов.

Клавиши:

Первым делом, чтобы программа корректно считала площадь нужно задать сколько метров в одном пикселе картинки, данное значение вам придётся рассчитать самим. Чтобы это сделать нажмите на "R", введите нужное значение, снова нажмите на "R" или на "Enter". Значение по умолчанию: 11.24 метра/пиксель.

ЛКМ - создать прямоугольное выделение (ИЛИ удалить последнюю точку в произвольном выделении, если вы его прямо сейчас создаёте). Второе нажатие ЛКМ завершит выделение.

ПКМ - создать или добавить точку к произвольному выделению (ИЛИ отменить создание прямоугольного выделения, если вы его прямо сейчас создаёте). Чтобы завершить создание вам нужно замкнуть внутреннюю зону, навядя мышку на первую точку (тоже с помощью ПКМ). (Пожалуйста, не создавайте слишком большие произвольные выделения, алгоритм преобразования векторной фигуры в данные довольнольно медленный.)

Чтобы переключаться между созданными выделениями вы можете воспользоваться стрелочками (вверх или вниз).

Также есть возможность вывести на экран сразу все выделения, но будет показываться площадь только у выбранного выделенияи (оно будет окрашено красным цветом). Чтобы это сделать нужно нажать на "A" (сокр. от "All"), повторное нажатие вернёт всё в норму.

Дополнительные возможности:

СКМ - добавить цвет, на который направлена мышь к цветам, которые не стоит учитывать при нахождении площади. Это может быть полезно например при нахождении площади острова - вы можете нажать СКМ по любой точке моря и вам не придётся его оккуратно обводить, ведь море не будет учитываться даже находясь внутри выделения.

"Z" - сбросить все цвета, выбранные с помощью предыдущей опции.

"D" - удалить выбранное выделение.

"С" - поставить "центральную" точку изображения. Данная функция целиком и полностью нужна для нахождения "цены" выбранной территории. Чем центр ближе к территории, тем она дороже в геометрической прогрессии. Чем территория больше, тем она также дороже.

Приятного использования программы, надеюсь она сможет вам пригодиться! ^_^

//Чтобы продолжить, нажмите любую клавишу, или "Escape", чтобы выйти из программы. Данное окно больше показываться не будет, чтобы прочитать эту инструкцию ещё раз вы можете заглянуть в файл README в корне программы. если вы его удалите, то окно будет показано заново.</value>
  </data>
</root>